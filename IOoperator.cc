#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <cmath>

using namespace std;

class IOoperator{
    public:
    string s1 = ""; //original strings generated by input file.
    string s2 = "";
    
    /*
    Generating the raw strings before alignment.
    */
    void stringGenerator(int argc, char *argv[]){
        vector<string> lines = this->fileReader(argc, argv);
        string current_string = "";
        int len = 0;        //length of a base string.
        int numOfIndices = 0;          // number of lines consist of indices(j or k).
            for(auto line :lines){
                char char_array[line.length() + 1];
                strcpy(char_array, line.c_str());
                if (char_array[0] <= 'Z' && char_array[0] >='A'){
                    if(current_string == ""){
                        current_string = line;
                        len = current_string.length();
                    }
                    else{
                        if(numOfIndices >10 || len >2000 || pow(2,numOfIndices)*len >2000){
                            perror("Invalid Input String s1");
                        }
                        s1 = current_string;
                        current_string = line;
                        len = current_string.length();
                        numOfIndices = 0;
                    }
                }
                else {
                    numOfIndices++;
                    string temp;
                    int loc = stoi(line);
                    temp = current_string.substr(0,loc+1);
                    temp.append(current_string,0,current_string.length());
                    temp.append(current_string,loc+1,current_string.length()-loc-1);
                    current_string = temp;
                      
                }
            }
            if(numOfIndices >10 || len >2000 || pow(2,numOfIndices)*len >2000){
                perror("Invalid Input String s2");
                
            }
            s2 = current_string;
    }

    /*
    void fileWriter(int cost, string strAlign1, string strAlign2, float time, float memory)
    Writing output data to output file. If there is a output file given, use it as output file; 
    otherwise build a "output.txt" as output file.
    <Parameter>
    cost: Cost of the alignment (Integer)
    strAlign1: First string alignment ( Consists of A, C, T, G, _ (gap) characters)    
    strAlign2: Second string alignment ( Consists of A, C, T, G, _ (gap) characters )
    time: Time in Milliseconds (Float)
    memory: Memory in Kilobytes (Float)

    */

    void fileWriter(int cost, string strAlign1, string strAlign2, float time, float memory){
        ofstream outfile(this->outFile);
        if(outfile.is_open()){
    
            outfile<<cost<<endl;
            outfile<<strAlign1<<endl;
            outfile<<strAlign2<<endl;
            outfile<<time<<endl;
            outfile<<memory<<endl;
            outfile.close();
        }   
    }

    /*
    For debug use, print s1 and s2 to command line.
    */
    void stringPrinter(){
        cout<<"s1: "<<s1<<endl;
        cout<<"s2: "<<s2<<endl;
    }


    private:

    /*
    Read lines from given input file, store lines into a std::vector<std::string>.
    */
    vector<string> fileReader(int argc, char *argv[]){
        vector<string> output;
        // this->argc = argc;
        
        char *inLines = NULL;
        string inFile = "";
        this->outFile = "output.txt";
        if (argc == 1){
        perror("Input file invalid");
        }
        inFile = argv[1];
        if( argc >= 3 ) {
        this->outFile = argv[2];
        }
        ifstream infile(inFile);
        string line;  
        if(infile.is_open()){
            while(getline(infile, line)){
                output.push_back(line);
            }

            infile.close();
        }
        return output;
    }
    string outFile = "";    //output filename.
};


int main(int argc, char *argv[]){
    IOoperator myio;
    myio.stringGenerator(argc, argv);
    
    
    
    
    // myio.fileWriter();
    return 0;
}